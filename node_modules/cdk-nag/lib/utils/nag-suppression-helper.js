"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NagSuppressionHelper = void 0;
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
const buffer_1 = require("buffer");
const aws_cdk_lib_1 = require("aws-cdk-lib");
class NagSuppressionHelper {
    static toCfnFormat(suppression) {
        const { appliesTo, reason, ...result } = suppression;
        if (appliesTo) {
            result.applies_to = appliesTo;
        }
        if ([...reason].some((c) => c.codePointAt(0) === undefined ? false : c.codePointAt(0) > 255)) {
            result.is_reason_encoded = true;
            return { reason: buffer_1.Buffer.from(reason).toString('base64'), ...result };
        }
        return { reason, ...result };
    }
    static toApiFormat(suppression) {
        const { applies_to, reason, is_reason_encoded, ...result } = suppression;
        if (applies_to) {
            result.appliesTo = applies_to;
        }
        if (is_reason_encoded) {
            return { reason: buffer_1.Buffer.from(reason, 'base64').toString(), ...result };
        }
        return { reason, ...result };
    }
    static addRulesToMetadata(metadata, rules) {
        const { rules_to_suppress } = metadata ?? {};
        const serialisedRules = [
            ...(rules_to_suppress ?? []).map((r) => JSON.stringify(r)),
            ...rules
                .map(NagSuppressionHelper.toCfnFormat)
                .map((r) => JSON.stringify(r)),
        ];
        const deduplicatedRules = Array.from(new Set(serialisedRules));
        return { rules_to_suppress: deduplicatedRules.map((r) => JSON.parse(r)) };
    }
    static getSuppressions(node) {
        const resourceIgnores = node.getMetadata('cdk_nag')?.rules_to_suppress ?? [];
        const stackIgnores = aws_cdk_lib_1.Stack.of(node).templateOptions.metadata?.cdk_nag?.rules_to_suppress ?? [];
        const result = [...resourceIgnores, ...stackIgnores].map(NagSuppressionHelper.toApiFormat);
        NagSuppressionHelper.assertSuppressionsAreValid(node.node.id, result);
        return result;
    }
    static assertSuppressionsAreValid(id, suppressions) {
        const errors = suppressions
            .map(NagSuppressionHelper.getSuppressionFormatError)
            .filter((errorMessage) => !!errorMessage);
        if (errors.length) {
            throw Error(`${id}: ${errors.join('')}\nSee https://github.com/cdklabs/cdk-nag#suppressing-a-rule for information on suppressing a rule.`);
        }
    }
    static doesApply(suppression, ruleId, findingId) {
        if (ruleId !== suppression.id) {
            return false;
        }
        if (!suppression.appliesTo) {
            // the rule is not granular so it always applies
            return true;
        }
        if (findingId &&
            suppression.appliesTo.some((appliesTo) => {
                if (typeof appliesTo === 'string') {
                    return appliesTo === findingId;
                }
                else {
                    const regex = NagSuppressionHelper.toRegEx(appliesTo.regex);
                    return regex.test(findingId);
                }
            })) {
            return true;
        }
        return false;
    }
    static getSuppressionFormatError(suppression) {
        let errors = '';
        const finding = suppression.id.match(/\[.*\]/);
        if (finding) {
            errors += `The suppression 'id' contains a finding '${finding}. A finding must be suppressed using 'applies_to'.`;
        }
        if (suppression.reason.length < 10) {
            errors +=
                "The suppression must have a 'reason' of 10 characters or more.";
        }
        (suppression.appliesTo ?? []).forEach((appliesTo) => {
            if (typeof appliesTo !== 'string') {
                try {
                    NagSuppressionHelper.toRegEx(appliesTo.regex);
                }
                catch (err) {
                    errors += err.message;
                }
            }
        });
        return errors
            ? `\n\tError(s) detected in suppression with 'id' ${suppression.id}. ${errors}`
            : '';
    }
    static toRegEx(s) {
        try {
            // verify that the regex is correctly formatted
            const m = s.match(/\/(.*)\/(.*)?/);
            if (!m) {
                throw new Error();
            }
            return new RegExp(m[1], m[2] || '');
        }
        catch {
            throw new Error(`Invalid regular expression [${s}]`);
        }
    }
}
exports.NagSuppressionHelper = NagSuppressionHelper;
//# sourceMappingURL=data:application/json;base64,