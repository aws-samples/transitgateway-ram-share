"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NagSuppressions = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
const aws_cdk_lib_1 = require("aws-cdk-lib");
const nag_suppression_helper_1 = require("./utils/nag-suppression-helper");
/**
 * Helper class with methods to add cdk-nag suppressions to cdk resources
 */
class NagSuppressions {
    /**
     * Apply cdk-nag suppressions to a Stack and optionally nested stacks
     * @param stack The Stack to apply the suppression to
     * @param suppressions A list of suppressions to apply to the stack
     * @param applyToNestedStacks Apply the suppressions to children stacks (default:false)
     */
    static addStackSuppressions(stack, suppressions, applyToNestedStacks = false) {
        const stacks = applyToNestedStacks
            ? stack.node.findAll().filter((x) => x instanceof aws_cdk_lib_1.Stack)
            : [stack];
        stacks.forEach((s) => {
            nag_suppression_helper_1.NagSuppressionHelper.assertSuppressionsAreValid(s.node.id, suppressions);
            let metadata = s.templateOptions.metadata?.cdk_nag ?? {};
            metadata = nag_suppression_helper_1.NagSuppressionHelper.addRulesToMetadata(metadata, suppressions);
            if (!s.templateOptions.metadata) {
                s.templateOptions.metadata = {};
            }
            s.templateOptions.metadata.cdk_nag = metadata;
        });
    }
    /**
     * Add cdk-nag suppressions to a CfnResource and optionally its children
     * @param construct The IConstruct(s) to apply the suppression to
     * @param suppressions A list of suppressions to apply to the resource
     * @param applyToChildren Apply the suppressions to children CfnResources  (default:false)
     */
    static addResourceSuppressions(construct, suppressions, applyToChildren = false) {
        const constructArray = Array.isArray(construct)
            ? construct
            : [construct];
        if (constructArray.length === 0) {
            throw new Error(`Construct cannot be an empty array.`);
        }
        constructArray.forEach((c) => {
            nag_suppression_helper_1.NagSuppressionHelper.assertSuppressionsAreValid(c.node.id, suppressions);
            const constructs = applyToChildren ? c.node.findAll() : [c];
            for (const child of constructs) {
                const possibleL1 = child.node.defaultChild
                    ? child.node.defaultChild
                    : child;
                if (possibleL1 instanceof aws_cdk_lib_1.CfnResource) {
                    const resource = possibleL1;
                    let metadata = resource.getMetadata('cdk_nag');
                    metadata = nag_suppression_helper_1.NagSuppressionHelper.addRulesToMetadata(metadata, suppressions);
                    resource.addMetadata('cdk_nag', metadata);
                }
            }
        });
    }
    /**
     * Add cdk-nag suppressions to a CfnResource and optionally its children via its path
     * @param stack The Stack the construct belongs to
     * @param path The path(s) to the construct in the provided stack
     * @param suppressions A list of suppressions to apply to the resource
     * @param applyToChildren Apply the suppressions to children CfnResources  (default:false)
     */
    static addResourceSuppressionsByPath(stack, path, suppressions, applyToChildren = false) {
        const pathArray = Array.isArray(path) ? path : [path];
        if (pathArray.length === 0) {
            throw new Error(`Path cannot be an empty array.`);
        }
        pathArray.forEach((p) => {
            let added = false;
            for (const child of stack.node.findAll()) {
                const fixedPath = p.replace(/^\//, '');
                if (child.node.path === fixedPath ||
                    child.node.path + '/Resource' === fixedPath) {
                    NagSuppressions.addResourceSuppressions(child, suppressions, applyToChildren);
                    added = true;
                }
            }
            if (!added) {
                throw new Error(`Suppression path "${p}" did not match any resource. This can occur when a resource does not exist or if a suppression is applied before a resource is created.`);
            }
        });
    }
}
exports.NagSuppressions = NagSuppressions;
_a = JSII_RTTI_SYMBOL_1;
NagSuppressions[_a] = { fqn: "cdk-nag.NagSuppressions", version: "2.27.68" };
//# sourceMappingURL=data:application/json;base64,