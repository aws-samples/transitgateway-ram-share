"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NagPack = void 0;
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
const aws_cdk_lib_1 = require("aws-cdk-lib");
const ignore_suppression_conditions_1 = require("./ignore-suppression-conditions");
const nag_logger_1 = require("./nag-logger");
const nag_rules_1 = require("./nag-rules");
const nag_suppression_helper_1 = require("./utils/nag-suppression-helper");
/**
 * Base class for all rule packs.
 */
class NagPack {
    constructor(props) {
        this.loggers = new Array();
        this.packName = '';
        this.userGlobalSuppressionIgnore = props?.suppressionIgnoreCondition;
        this.loggers.push(new nag_logger_1.AnnotationLogger({
            verbose: props?.verbose,
            logIgnores: props?.logIgnores,
        }));
        if (props?.reports ?? true) {
            const formats = props?.reportFormats
                ? props.reportFormats
                : [nag_logger_1.NagReportFormat.CSV];
            this.loggers.push(new nag_logger_1.NagReportLogger({ formats }));
        }
        if (props?.additionalLoggers) {
            this.loggers.push(...props.additionalLoggers);
        }
    }
    get readPackName() {
        return this.packName;
    }
    /**
     * Create a rule to be used in the NagPack.
     * @param params The @IApplyRule interface with rule details.
     */
    applyRule(params) {
        if (this.packName === '') {
            throw Error('The NagPack does not have a pack name, therefore the rule could not be applied. Set a packName in the NagPack constructor.');
        }
        const allSuppressions = nag_suppression_helper_1.NagSuppressionHelper.getSuppressions(params.node);
        const ruleSuffix = params.ruleSuffixOverride
            ? params.ruleSuffixOverride
            : params.rule.name;
        const ruleId = `${this.packName}-${ruleSuffix}`;
        const base = {
            nagPackName: this.packName,
            resource: params.node,
            ruleId: ruleId,
            ruleInfo: params.info,
            ruleExplanation: params.explanation,
            ruleLevel: params.level,
        };
        try {
            const ruleCompliance = params.rule(params.node);
            if (ruleCompliance === nag_rules_1.NagRuleCompliance.COMPLIANT) {
                this.loggers.forEach((t) => t.onCompliance(base));
            }
            else if (this.isNonCompliant(ruleCompliance)) {
                const findings = this.asFindings(ruleCompliance);
                for (const findingId of findings) {
                    const suppressionReason = this.ignoreRule(allSuppressions, ruleId, findingId, params.node, params.level, params.ignoreSuppressionCondition);
                    if (suppressionReason) {
                        this.loggers.forEach((t) => t.onSuppressed({
                            ...base,
                            suppressionReason,
                            findingId,
                        }));
                    }
                    else {
                        this.loggers.forEach((t) => t.onNonCompliance({
                            ...base,
                            findingId,
                        }));
                    }
                }
            }
            else if (ruleCompliance === nag_rules_1.NagRuleCompliance.NOT_APPLICABLE) {
                this.loggers.forEach((t) => t.onNotApplicable({
                    ...base,
                }));
            }
        }
        catch (error) {
            const reason = this.ignoreRule(allSuppressions, nag_rules_1.VALIDATION_FAILURE_ID, '', params.node, params.level, params.ignoreSuppressionCondition);
            if (reason) {
                this.loggers.forEach((t) => t.onSuppressedError({
                    ...base,
                    errorMessage: error.message,
                    errorSuppressionReason: reason,
                }));
            }
            else {
                this.loggers.forEach((t) => t.onError({
                    ...base,
                    errorMessage: error.message,
                }));
            }
        }
    }
    /**
     * Check whether a specific rule should be ignored.
     * @param suppressions The suppressions listed in the cdk-nag metadata.
     * @param ruleId The id of the rule to ignore.
     * @param resource The resource being evaluated.
     * @param findingId The id of the finding that is being checked.
     * @returns The reason the rule was ignored, or an empty string.
     */
    ignoreRule(suppressions, ruleId, findingId, resource, level, ignoreSuppressionCondition) {
        for (let suppression of suppressions) {
            if (nag_suppression_helper_1.NagSuppressionHelper.doesApply(suppression, ruleId, findingId)) {
                const ignoreMessage = new ignore_suppression_conditions_1.SuppressionIgnoreOr(this.userGlobalSuppressionIgnore ?? new ignore_suppression_conditions_1.SuppressionIgnoreNever(), this.packGlobalSuppressionIgnore ?? new ignore_suppression_conditions_1.SuppressionIgnoreNever(), ignoreSuppressionCondition ?? new ignore_suppression_conditions_1.SuppressionIgnoreNever()).createMessage({
                    resource,
                    reason: suppression.reason,
                    ruleId,
                    findingId,
                    ruleLevel: level,
                });
                if (ignoreMessage) {
                    let id = findingId ? `${ruleId}[${findingId}]` : `${ruleId}`;
                    aws_cdk_lib_1.Annotations.of(resource).addInfo(`The suppression for ${id} was ignored for the following reason(s).\n\t${ignoreMessage}`);
                }
                else {
                    if (!suppression.appliesTo) {
                        // the rule is not granular so it always applies
                        return suppression.reason;
                    }
                    else {
                        return `[${findingId}] ${suppression.reason}`;
                    }
                }
            }
        }
        return '';
    }
    isNonCompliant(ruleResult) {
        return (ruleResult === nag_rules_1.NagRuleCompliance.NON_COMPLIANT ||
            Array.isArray(ruleResult));
    }
    asFindings(ruleResult) {
        if (Array.isArray(ruleResult)) {
            return ruleResult;
        }
        else {
            return [''];
        }
    }
}
exports.NagPack = NagPack;
_a = JSII_RTTI_SYMBOL_1;
NagPack[_a] = { fqn: "cdk-nag.NagPack", version: "2.27.68" };
//# sourceMappingURL=data:application/json;base64,