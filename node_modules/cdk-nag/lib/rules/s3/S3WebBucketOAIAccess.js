"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_s3_1 = require("aws-cdk-lib/aws-s3");
const nag_rules_1 = require("../../nag-rules");
/**
 * S3 static website buckets do not have an open world bucket policy and use CloudFront Origin Access Identities in the bucket policy for limited getObject and/or putObject permissions
 * @param node the CfnResource to check
 */
exports.default = Object.defineProperty((node) => {
    if (node instanceof aws_s3_1.CfnBucket) {
        if (node.websiteConfiguration !== undefined) {
            const bucketLogicalId = nag_rules_1.NagRules.resolveResourceFromInstrinsic(node, node.ref);
            const bucketName = aws_cdk_lib_1.Stack.of(node).resolve(node.bucketName);
            let found = false;
            for (const child of aws_cdk_lib_1.Stack.of(node).node.findAll()) {
                if (child instanceof aws_s3_1.CfnBucketPolicy) {
                    if (isMatchingCompliantPolicy(child, bucketLogicalId, bucketName)) {
                        found = true;
                    }
                }
            }
            if (!found) {
                return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
            }
        }
        return nag_rules_1.NagRuleCompliance.COMPLIANT;
    }
    else {
        return nag_rules_1.NagRuleCompliance.NOT_APPLICABLE;
    }
}, 'name', { value: path_1.parse(__filename).name });
/**
 * Helper function to check whether the Bucket Policy does not allow for open access  and uses a restricted OAI Policy for access on the given bucket.
 * @param node The CfnBucketPolicy to check.
 * @param bucketLogicalId The Cfn Logical ID of the bucket.
 * @param bucketName The name of the bucket.
 * @returns Whether the CfnBucketPolicy allows for open access on the given bucket.
 */
function isMatchingCompliantPolicy(node, bucketLogicalId, bucketName) {
    const bucket = nag_rules_1.NagRules.resolveResourceFromInstrinsic(node, node.bucket);
    if (bucket !== bucketLogicalId && bucket !== bucketName) {
        return false;
    }
    const resolvedPolicyDocument = aws_cdk_lib_1.Stack.of(node).resolve(node.policyDocument);
    let found = false;
    for (const statement of resolvedPolicyDocument.Statement) {
        const resolvedStatement = aws_cdk_lib_1.Stack.of(node).resolve(statement);
        if (resolvedStatement.Effect === 'Allow') {
            if (checkStarPrincipals(resolvedStatement.Principal)) {
                return false;
            }
            if (checkOAIPrincipal(resolvedStatement.Principal)) {
                if (checkMatchingActions(normalizeArray(resolvedStatement.Action))) {
                    found = true;
                }
                else {
                    return false;
                }
            }
        }
    }
    return found;
}
/**
 * Helper function to check whether the Bucket Policy applies to all principals
 * @param node The CfnBucketPolicy to check
 * @param principal The principals in the bucket policy
 * @returns Whether the CfnBucketPolicy applies to all principals
 */
function checkStarPrincipals(principals) {
    return JSON.stringify(principals ?? '').includes('*');
}
/**
 * Helper function to check whether the Bucket Policy applies to a CloudFront OAI
 * @param node The CfnBucketPolicy to check
 * @param principal The principals in the bucket policy
 * @returns Whether the CfnBucketPolicy applies to a CloudFront OAI
 */
function checkOAIPrincipal(principals) {
    const usesAWSPrincipalOAI = JSON.stringify(principals.AWS ?? '').includes('CloudFront Origin Access Identity');
    const usesCanonicalUserPrincipal = !!principals?.CanonicalUser;
    return usesAWSPrincipalOAI || usesCanonicalUserPrincipal;
}
/**
 * Helper function to check whether the statement applies to only GetObject and/or PutObject actions
 * @param node The statement to check
 * @param actions The action in the bucket statement
 * @returns Whether the statement applies to only GetObject and/or PutObject actions
 */
function checkMatchingActions(actions) {
    for (const action of actions) {
        if (action.toLowerCase() !== 's3:getobject' &&
            action.toLowerCase() !== 's3:putobject') {
            return false;
        }
    }
    return true;
}
function normalizeArray(arrOrStr) {
    return Array.isArray(arrOrStr) ? arrOrStr : [arrOrStr];
}
//# sourceMappingURL=data:application/json;base64,