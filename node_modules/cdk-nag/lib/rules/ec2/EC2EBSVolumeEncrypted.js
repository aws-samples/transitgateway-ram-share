"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_autoscaling_1 = require("aws-cdk-lib/aws-autoscaling");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const nag_rules_1 = require("../../nag-rules");
/**
 * EBS volumes have encryption enabled
 * @param node the CfnResource to check
 */
exports.default = Object.defineProperty((node) => {
    if (node instanceof aws_ec2_1.CfnVolume) {
        const encryption = nag_rules_1.NagRules.resolveIfPrimitive(node, node.encrypted);
        if (encryption !== true) {
            return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
        }
        return nag_rules_1.NagRuleCompliance.COMPLIANT;
    }
    else if (node instanceof aws_ec2_1.CfnInstance) {
        const instanceEBSState = InstanceEBSState(node);
        const launchTemplate = aws_cdk_lib_1.Stack.of(node).resolve(node.launchTemplate);
        for (const child of aws_cdk_lib_1.Stack.of(node).node.findAll()) {
            if (child instanceof aws_ec2_1.CfnLaunchTemplate) {
                if (isMatchingLaunchTemplate(child, launchTemplate.launchTemplateName, launchTemplate.launchTemplateId)) {
                    const instanceLaunchTemplateState = InstanceLaunchTemplateState(child);
                    if (instanceEBSState === BlockDevicesState.Absent &&
                        instanceLaunchTemplateState === BlockDevicesState.Absent) {
                        return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
                    }
                    if (instanceEBSState === BlockDevicesState.Unencrypted ||
                        instanceLaunchTemplateState === BlockDevicesState.Unencrypted) {
                        return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
                    }
                    return nag_rules_1.NagRuleCompliance.COMPLIANT;
                }
            }
        }
        if (instanceEBSState === BlockDevicesState.Encrypted) {
            return nag_rules_1.NagRuleCompliance.COMPLIANT;
        }
        return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
    }
    else if (node instanceof aws_autoscaling_1.CfnLaunchConfiguration) {
        const blockDeviceMappings = aws_cdk_lib_1.Stack.of(node).resolve(node.blockDeviceMappings);
        if (blockDeviceMappings == undefined) {
            return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
        }
        else {
            for (const blockDeviceMapping of blockDeviceMappings) {
                const encryption = nag_rules_1.NagRules.resolveIfPrimitive(node, blockDeviceMapping.ebs.encrypted);
                if (encryption !== true) {
                    return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
                }
            }
        }
        return nag_rules_1.NagRuleCompliance.COMPLIANT;
    }
    else if (node instanceof aws_autoscaling_1.CfnAutoScalingGroup) {
        const launchTemplate = aws_cdk_lib_1.Stack.of(node).resolve(node.launchTemplate);
        for (const child of aws_cdk_lib_1.Stack.of(node).node.findAll()) {
            if (child instanceof aws_ec2_1.CfnLaunchTemplate) {
                if (isMatchingLaunchTemplate(child, launchTemplate.launchTemplateName, launchTemplate.launchTemplateId)) {
                    if (InstanceLaunchTemplateState(child) === BlockDevicesState.Encrypted) {
                        return nag_rules_1.NagRuleCompliance.COMPLIANT;
                    }
                    return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
                }
            }
        }
        return nag_rules_1.NagRuleCompliance.NOT_APPLICABLE;
    }
    else {
        return nag_rules_1.NagRuleCompliance.NOT_APPLICABLE;
    }
}, 'name', { value: path_1.parse(__filename).name });
var BlockDevicesState;
(function (BlockDevicesState) {
    BlockDevicesState[BlockDevicesState["Encrypted"] = 0] = "Encrypted";
    BlockDevicesState[BlockDevicesState["Unencrypted"] = 1] = "Unencrypted";
    BlockDevicesState[BlockDevicesState["Absent"] = 2] = "Absent";
})(BlockDevicesState || (BlockDevicesState = {}));
function isMatchingLaunchTemplate(node, launchTemplateName, launchTemplateId) {
    return (launchTemplateName === node.launchTemplateName ||
        launchTemplateId === nag_rules_1.NagRules.resolveResourceFromInstrinsic(node, node.ref));
}
function InstanceLaunchTemplateState(launchTemplate) {
    const launchTemplateData = aws_cdk_lib_1.Stack.of(launchTemplate).resolve(launchTemplate.launchTemplateData);
    if (launchTemplateData.blockDeviceMappings === undefined ||
        launchTemplateData.blockDeviceMappings.length === 0) {
        return BlockDevicesState.Absent;
    }
    else {
        const launchTemplateBlockDeviceMappings = aws_cdk_lib_1.Stack.of(launchTemplate).resolve(launchTemplateData.blockDeviceMappings);
        const devicesAllEncrypted = launchTemplateBlockDeviceMappings.every((blockDeviceMapping) => {
            const encryption = nag_rules_1.NagRules.resolveIfPrimitive(launchTemplate, blockDeviceMapping.ebs.encrypted);
            return encryption === true;
        });
        return devicesAllEncrypted
            ? BlockDevicesState.Encrypted
            : BlockDevicesState.Unencrypted;
    }
}
function InstanceEBSState(node) {
    const blockDeviceMappings = aws_cdk_lib_1.Stack.of(node).resolve(node.blockDeviceMappings);
    if (blockDeviceMappings === undefined || blockDeviceMappings.length === 0) {
        return BlockDevicesState.Absent;
    }
    else {
        const devicesAllEncrypted = blockDeviceMappings.every((blockDeviceMapping) => {
            const encryption = nag_rules_1.NagRules.resolveIfPrimitive(node, blockDeviceMapping.ebs.encrypted);
            return encryption === true;
        });
        return devicesAllEncrypted
            ? BlockDevicesState.Encrypted
            : BlockDevicesState.Unencrypted;
    }
}
//# sourceMappingURL=data:application/json;base64,