"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_autoscaling_1 = require("aws-cdk-lib/aws-autoscaling");
const aws_ec2_1 = require("aws-cdk-lib/aws-ec2");
const nag_rules_1 = require("../../nag-rules");
/**
 * The EC2 Instance requires IMDsv2
 * @param node the CfnResource to check
 */
exports.default = Object.defineProperty((node) => {
    if (node instanceof aws_ec2_1.CfnInstance) {
        if (node.launchTemplate === undefined) {
            return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
        }
        const instanceLaunchTemplate = aws_cdk_lib_1.Stack.of(node).resolve(node.launchTemplate);
        for (const child of aws_cdk_lib_1.Stack.of(node).node.findAll()) {
            if (child instanceof aws_ec2_1.CfnLaunchTemplate) {
                if (isMatchingLaunchTemplate(child, instanceLaunchTemplate.launchTemplateName, instanceLaunchTemplate.launchTemplateId)) {
                    return hasHttpTokens(child)
                        ? nag_rules_1.NagRuleCompliance.COMPLIANT
                        : nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
                }
            }
        }
        return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
    }
    else if (node instanceof aws_autoscaling_1.CfnAutoScalingGroup) {
        if (node.launchTemplate) {
            const nodeLaunchTemplate = aws_cdk_lib_1.Stack.of(node).resolve(node.launchTemplate);
            for (const child of aws_cdk_lib_1.Stack.of(node).node.findAll()) {
                if (child instanceof aws_ec2_1.CfnLaunchTemplate) {
                    if (isMatchingLaunchTemplate(child, nodeLaunchTemplate.launchTemplateName, nodeLaunchTemplate.launchTemplateId)) {
                        return hasHttpTokens(child)
                            ? nag_rules_1.NagRuleCompliance.COMPLIANT
                            : nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
                    }
                }
            }
        }
        else if (node.launchConfigurationName) {
            for (const child of aws_cdk_lib_1.Stack.of(node).node.findAll()) {
                if (child instanceof aws_autoscaling_1.CfnLaunchConfiguration) {
                    if (isMatchingLaunchConfiguration(child, node.launchConfigurationName)) {
                        return hasHttpTokens(child)
                            ? nag_rules_1.NagRuleCompliance.COMPLIANT
                            : nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
                    }
                }
            }
        }
        return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
    }
    else {
        return nag_rules_1.NagRuleCompliance.NOT_APPLICABLE;
    }
}, 'name', { value: path_1.parse(__filename).name });
function isMatchingLaunchTemplate(node, launchTemplateName, launchTemplateId) {
    return (launchTemplateName === node.launchTemplateName ||
        launchTemplateId === nag_rules_1.NagRules.resolveResourceFromInstrinsic(node, node.ref));
}
function isMatchingLaunchConfiguration(node, launchConfigurationName) {
    return (launchConfigurationName === node.launchConfigurationName ||
        nag_rules_1.NagRules.resolveResourceFromInstrinsic(node, launchConfigurationName) ===
            nag_rules_1.NagRules.resolveResourceFromInstrinsic(node, node.ref));
}
function hasHttpTokens(node) {
    let meta;
    if (node instanceof aws_ec2_1.CfnLaunchTemplate) {
        const launchTemplateData = aws_cdk_lib_1.Stack.of(node).resolve(node.launchTemplateData);
        meta = aws_cdk_lib_1.Stack.of(node).resolve(launchTemplateData.metadataOptions);
    }
    else if (node instanceof aws_autoscaling_1.CfnLaunchConfiguration) {
        meta = aws_cdk_lib_1.Stack.of(node).resolve(node.metadataOptions);
    }
    return meta?.httpTokens === 'required';
}
//# sourceMappingURL=data:application/json;base64,