"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/*
Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
SPDX-License-Identifier: Apache-2.0
*/
const path_1 = require("path");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_sqs_1 = require("aws-cdk-lib/aws-sqs");
const nag_rules_1 = require("../../nag-rules");
/**
 * SQS queues require SSL requests
 * @param node the CfnResource to check
 */
exports.default = Object.defineProperty((node) => {
    if (node instanceof aws_sqs_1.CfnQueue) {
        const queueLogicalId = nag_rules_1.NagRules.resolveResourceFromInstrinsic(node, node.ref);
        const queueName = aws_cdk_lib_1.Stack.of(node).resolve(node.queueName);
        let found = false;
        for (const child of aws_cdk_lib_1.Stack.of(node).node.findAll()) {
            if (child instanceof aws_sqs_1.CfnQueuePolicy) {
                if (isMatchingCompliantPolicy(child, queueLogicalId, queueName)) {
                    found = true;
                    break;
                }
            }
        }
        if (!found) {
            return nag_rules_1.NagRuleCompliance.NON_COMPLIANT;
        }
        return nag_rules_1.NagRuleCompliance.COMPLIANT;
    }
    else {
        return nag_rules_1.NagRuleCompliance.NOT_APPLICABLE;
    }
}, 'name', { value: path_1.parse(__filename).name });
/**
 * Helper function to check whether the queue Policy requires SSL on the given queue.
 * @param node The CfnQueuePolicy to check.
 * @param queueLogicalId The Cfn Logical ID of the queue.
 * @param queueName The name of the queue.
 * @returns Whether the CfnQueuePolicy requires SSL on the given queue.
 */
function isMatchingCompliantPolicy(node, queueLogicalId, queueName) {
    let found = false;
    for (const queue of node.queues) {
        const resolvedQueue = nag_rules_1.NagRules.resolveResourceFromInstrinsic(node, queue);
        if (resolvedQueue === queueLogicalId ||
            (queueName !== undefined && resolvedQueue.endsWith(queueName))) {
            found = true;
            break;
        }
    }
    if (!found) {
        return false;
    }
    const resolvedPolicyDocument = aws_cdk_lib_1.Stack.of(node).resolve(node.policyDocument);
    for (const statement of resolvedPolicyDocument.Statement) {
        const resolvedStatement = aws_cdk_lib_1.Stack.of(node).resolve(statement);
        const secureTransport = resolvedStatement?.Condition?.Bool?.['aws:SecureTransport'];
        if (resolvedStatement.Effect === 'Deny' &&
            checkMatchingAction(resolvedStatement.Action) === true &&
            checkMatchingPrincipal(resolvedStatement.Principal) === true &&
            (secureTransport === 'false' || secureTransport === false)) {
            return true;
        }
    }
    return false;
}
/**
 * Helper function to check whether the queue Policy applies to queue actions
 * @param node The CfnQueuePolicy to check
 * @param actions The action in the queue policy
 * @returns Whether the CfnQueuePolicy applies to queue actions
 */
function checkMatchingAction(actions) {
    if (Array.isArray(actions)) {
        for (const action of actions) {
            if (action === '*' || action.toLowerCase() === 'sqs:*') {
                return true;
            }
        }
    }
    else if (actions === '*' || actions.toLowerCase() === 'sqs:*') {
        return true;
    }
    return false;
}
/**
 * Helper function to check whether the queue Policy applies to all principals
 * @param node The CfnQueuePolicy to check
 * @param principal The principals in the queue policy
 * @returns Whether the CfnQueuePolicy applies to all principals
 */
function checkMatchingPrincipal(principals) {
    if (principals === '*') {
        return true;
    }
    const awsPrincipal = principals.AWS;
    if (Array.isArray(awsPrincipal)) {
        for (const account of awsPrincipal) {
            if (account === '*') {
                return true;
            }
        }
    }
    else if (awsPrincipal === '*') {
        return true;
    }
    return false;
}
//# sourceMappingURL=data:application/json;base64,